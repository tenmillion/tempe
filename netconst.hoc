//-------- Revamped Bush et al. 1999 Model --------
// Implemented by Y Yamamura, 6 October 2013       
//-------------------------------------------------

load_file("pyramidal.hoc")
load_file("basket.hoc")
load_file("stdrun.hoc")

//-----------Basic settings-----------
celsius = 37
input = 0.13
record = 20
scale = 1.0
if (name_declared("degc")==5) {
   celsius = degc
}
if (name_declared("in")==5) {
   input = in
}
if (name_declared("rec")==5) {
   record = rec
}
if (name_declared("sc")==5) {
   scale = sc
}

//-----------Create cells-----------
npyr = 400
nbas = 100

objectvar pyr[npyr]
for i = 0, npyr-1 {
    pyr[i] = new Pyramidal()
}

objectvar bas[nbas]
for i = 0, nbas-1 {
    bas[i] = new Basket()
}

//-----------Make intrinsic connections-----------
objref p2pfile, p2bfile, b2pfile, r
r = new Random()
r.normal(1.2, 0.6)

p2pfile = new File()
p2bfile = new File()
p2pfile.ropen("p2p.dat")
p2bfile.ropen("p2b.dat")
nump2p = 0
nump2b = 0
for i = 0, npyr-1 {
    for j = 0, npyr-1 { // Set pyramidal -> pyramidal weights
        p2pwt = p2pfile.scanvar()
        if (p2pwt != 0) {
            dl = abs(r.repick())
            pyr[i].soma pyr[j].nclist.append(new NetCon(&v(0.5), pyr[j].ampa[0],-20, dl, abs(p2pwt)*scale))
	    nump2p = nump2p +1
	}
    }
    for j = 0, nbas-1 { // Set pyramidal -> basket weights
        p2bwt = p2bfile.scanvar()
        if (p2bwt != 0) {
            dl = abs(r.repick())
            pyr[i].soma bas[j].nclist.append(new NetCon(&v(0.5), bas[j].ampa[0],-20, dl, abs(p2bwt)*scale))
	    nump2b = nump2b +1
        }
    }
}
p2pfile.close()
p2bfile.close()
printf("p2p:")
print nump2p
printf("p2b:")
print nump2b

b2pfile = new File()
b2pfile.ropen("b2p.dat")
numb2p = 0
for i = 0, nbas-1 {
    for j = 0, npyr-1 { // Set basket -> pyramidal weights
        b2pwt = b2pfile.scanvar()
        if (b2pwt != 0) {
            dl = abs(r.repick())
            bas[i].soma pyr[j].nclist.append(new NetCon(&v(0.5), pyr[j].ampa[0],-20, dl, abs(b2pwt)*scale))
	    numb2p = numb2p+1
        }
    }
}
b2pfile.close()
printf("b2p:")
print numb2p

//-----------Make extrinsic input-----------
objref spgen, nc, nc_list
nc_list = new List()
printf("Extrinsic input:")

spgen = new NetStim() // generates spike train, synapse defined on receiving end 
spgen.interval = 0    // ms
spgen.number = 1      // times
spgen.start = 50      // ms
spgen.noise = 0	      // deterministic

spyr = npyr/20
sbas = nbas/20

for i = 0, 2*spyr-1 {  // stimulate 1 sigma
    nc = new NetCon(spgen, pyr[i].ext[0])
    nc.delay = 0
    nc.weight = input*exp(-0.5*((i-spyr)/spyr)^2)*(1/spyr/sqrt(2*PI))
    nc_list.append(nc)
    print nc.weight
}
print 2*spyr

for i = 0, 2*sbas-1 {  // stimulate 1 sigma
    nc = new NetCon(spgen, bas[i].ext[0])
    nc.delay = 0
    nc.weight = input*exp(-0.5*((i-sbas)/sbas)^2)*(1/sbas/sqrt(2*PI))
    nc_list.append(nc)
    print nc.weight
}
print 2*sbas

//-----------Initialize-----------
tstop = 1000

//-----------Record spikes-----------
objref recs, recid, sp_list, sp, nil
recs = new Vector()
recid = new Vector()
sp_list = new List()
for i=0,npyr-1 {
  pyr[i].soma sp = new NetCon(&v(0.5), nil)
  sp.threshold = -20
  sp.record(recs, recid, i+1) // so all the spike rasters lie above the x axis
  sp_list.append(sp)
}
for i=0,nbas-1 {
  bas[i].soma sp = new NetCon(&v(0.5), nil)
  sp.threshold = -20
  sp.record(recs, recid, npyr+i+1) 
  sp_list.append(sp)
}
objref sp // so we don't accidentally mess up the last NetCon
printf("Number of cells:")
print sp_list.count()
printf("Size of recs:")
print recs.size()

//-----------Record voltage------------
objref recv, rect

recv = new Vector()
recv.record(&pyr[record-1].soma.v(0.5))
rect = new Vector()
rect.record(&t)

//recv = new Vector()
//recv.record(&bas[record-1].soma.v(0.5))
//rect = new Vector()
//rect.record(&t)

printf("length of voltage trace:")
print recv.size()

//-----------Run-----------
printf("Running simulation...")
run()

//Outputs nothing when there were no spikes
if (recs.size() <= 0) { // If there were no spikes
   printf("No spikes.\n")
   quit()
}
printf("recid size:")
print recid.size() 
printf("recs size:")
print recs.size()
printf("recv len:")
print recv.size()

//-----------Graph & Write to file-----------
//printf("graph")
//objectvar g
//g = new Graph()
//g.size(0,1000,0,500)
//recid.mark(g, recs, "O", 1)
//g.flush()	 // Show the graph

strdef fname
objref outfile
outfile = new File()
sprint(fname, "spikes-sc%3.1f-degc%3.1f-input%3.2f.dat", scale, celsius, input)
outfile.wopen(fname)
objref tempmatrix
tempmatrix = new Matrix()
tempmatrix.resize(recs.size(),2)
tempmatrix.setcol(0, recs)
tempmatrix.setcol(1, recid)
tempmatrix.fprint(outfile, " %g")
outfile.close()

if (name_declared("rec")==5) {
	strdef fname2
	objref outfile2
	outfile2 = new File()
	sprint(fname2, "v-%3d-degc%3.1f-input%3.2f.dat", record, celsius, input)
	outfile2.wopen(fname2)
	objref tempmatrix2
	tempmatrix2 = new Matrix()
	tempmatrix2.resize(recv.size(),2)
	tempmatrix2.setcol(0, rect)
	tempmatrix2.setcol(1, recv)
	tempmatrix2.fprint(outfile2, " %g")
	outfile2.close()
}